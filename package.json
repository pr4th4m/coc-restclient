{
  "name": "coc-restclient",
  "version": "0.0.5",
  "description": "vscode http client for coc.nvim",
  "author": "Prathamesh Nevagi",
  "license": "MIT",
  "keywords": [
    "coc.nvim",
    "vscode"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/pr4th4m/coc-restclient.git"
  },
  "private": false,
  "main": "lib/index.js",
  "engines": {
    "coc": "^0.0.77"
  },
  "activationEvents": [
    "*"
  ],
  "scripts": {
    "clean": "rimraf lib",
    "lint": "eslint . --ext .ts",
    "lint:fix": "npm run lint -- --fix",
    "prettier": "prettier -c \"./**/*.{ts,json}\"",
    "prettier:fix": "prettier --write \"./**/*.{ts,json}\"",
    "watch": "webpack --watch",
    "build": "webpack",
    "prepare": "npx npm-run-all clean build"
  },
  "devDependencies": {
    "coc.nvim": "^0.0.77",
    "rimraf": "^3.0.2",
    "@types/node": "^14.0.12",
    "typescript": "^3.9.3",
    "ts-loader": "^7.0.5",
    "webpack": "^4.43.0",
    "webpack-cli": "^3.3.11",
    "prettier": "^2.0.5",
    "eslint": "^7.4.0",
    "@typescript-eslint/parser": "^3.6.0",
    "@typescript-eslint/eslint-plugin": "^3.6.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-prettier": "^3.1.4",
    "combined-stream": "^1.0.5",
    "fs-extra": "^5.0.0",
    "mime-types": "^2.1.14",
    "iconv-lite": "^0.4.15",
    "aws4": "^1.9.1",
    "got": "^11.8.5",
    "uuid": "^3.3.2",
    "http-proxy-agent": "^2.1.0",
    "https-proxy-agent": "^2.2.3",
    "tough-cookie": "^3.0.1",
    "tough-cookie-file-store-bugfix": "Huachao/tough-cookie-file-store-bugfix",
    "encodeurl": "^1.0.1"
  },
  "dependencies": {},
  "contributes": {
    "commands": [
      {
        "command": "rest-client.request",
        "title": "Send http request from current buffer",
        "category": "rest-client"
      }
    ],
    "configuration": {
      "title": "enable",
      "properties": {
        "rest-client.enable": {
          "type": "boolean",
          "default": true,
          "description": "enable this extension?"
        },
        "rest-client.showHeaders": {
          "type": "boolean",
          "default": true,
          "description": "show headers as well"
        },
        "rest-client.proxy": {
          "type": "string",
          "default": "",
          "description": "proxy"
        },
        "rest-client.proxyStrictSSL": {
          "type": "boolean",
          "default": false,
          "description": "proxy strict ssl"
        },
        "rest-client.excludeHostsForProxy": {
          "type": "array",
          "default": [],
          "scope": "resource",
          "description": "Excluded hosts when using using proxy settings"
        },
        "rest-client.timeoutinmilliseconds": {
          "type": "integer",
          "default": 0,
          "scope": "resource",
          "description": "Timeout in milliseconds. 0 for infinity"
        },
        "rest-client.followredirect": {
          "type": "boolean",
          "default": true,
          "scope": "resource",
          "description": "Follow HTTP 3xx responses as redirects."
        },
        "rest-client.rememberCookiesForSubsequentRequests": {
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "description": "Remember cookies for subsequent requests"
        },
        "rest-client.decodeEscapedUnicodeCharacters": {
          "type": "boolean",
          "default": false,
          "scope": "resource",
          "description": "Decode escaped unicode characters in response body."
        },
        "rest-client.defaultHeaders": {
          "type": "object",
          "default": {
            "User-Agent": "coc-restclient"
          },
          "scope": "resource",
          "description": "If particular headers are omitted in request headers, these will be added as headers for each request."
        },
        "rest-client.formParamEncodingStrategy": {
          "type": "string",
          "enum": [
            "automatic",
            "never",
            "always"
          ],
          "markdownEnumDescriptions": [
            "Detecting encoding or not automatically and do the encoding job if necessary",
            "Treat provided request body as is, no encoding job will be applied",
            "Use for the scenario that `automatic` option not working properly, e.g., some special characters(`+`) are not encoded correctly"
          ],
          "default": "automatic",
          "scope": "resource",
          "markdownDescription": "Form param encoding strategy for request body of `x-www-form-urlencoded`."
        },
        "rest-client.certificates": {
          "type": "object",
          "default": {},
          "scope": "resource",
          "description": "Certificate paths for different hosts. The path can be absolute path or relative path(relative to workspace or current http file)",
          "pattern": "^(?!http(s?)://)",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "object",
                "default": {},
                "description": "Certifcate paths for specific host(e.g., foo.com, bar.org:8081), port is optional",
                "properties": {
                  "cert": {
                    "type": "string",
                    "description": "Absolute or relative path of Public x509 certificate"
                  },
                  "key": {
                    "type": "string",
                    "description": "Absolute or relative path of Private key"
                  },
                  "pfx": {
                    "type": "string",
                    "description": "Absolute or relative path of PKCS #12 certificate"
                  },
                  "passphrase": {
                    "type": "string",
                    "description": "[Optional] A string of passphrase for the private key or pfx"
                  }
                },
                "dependencies": {
                  "cert": [
                    "key"
                  ],
                  "key": [
                    "cert"
                  ]
                }
              }
            ]
          }
        }
      }
    }
  }
}
